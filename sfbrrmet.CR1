'Sept 3 2014 Lara and Andrew
'Andrew removed all his remaining sensors and a new temp rh sensor installed D0930093
'Reinstalled our CR1000 5479.  Seems to be working

'Version 6.3 July 21, 2014 Lara
'Discovered 5V port on our CR1000 was not working.  This is why we couldn't communicate with the logger
'and also why BP sensor was not working.
'Swapped out our logger SN5479 with a loaner from Campbell SN 50765
'Both par and temp rh sensors should have right multipliers now

'Version 6.3 June 13, 2014 Lara
'Removed CS105 A0240014. Replaced with CS 106 J4930005. Sensor wasn't working
'Removed par 45608. Replaced with 47150.  Wrong multiplier in program since Feb 27.  

'Version 6.3 May 23, 2014 Lara and Elena
'Removed CS CR1000 logger serial num 50765 and put ours back serial num 5479
'Needs to be before recalibrated April 2019

'Version 6.3 April 23, 2014 Lara and Elena
'Replaced our CR1000 serial num 5479 with a loaner from CS serial num 50765 so ours can be calibrated

'Version 6.3 Feb 27, 2014 Lara Martin
'Changed Par sensor as bird had destroyed cable
'Removed Q47150
'No program changes

'Version 6.3 Sept 25, 2013 Lara Martin and Elena Ceballos
'Changed BP sensor from model CS106 (C2430021) to CS105 (A0240014) Changed mult and offset to 0.184 and 600
'Changed temp rh sensor from D930093 to F5230141

'Version 6.3 Oct 6, 2011 - changed Ch 4 par multiplier to -1.0 Lara Martin
'Version 6.3 September 29, 2011 Lara Martin and Caitlin Coleman-Hulbert
'Swapped all sensors. Temp and PAR are new. PAR is a new model. Rain guage calibrated.
'PAR is Q45608 with multiplier of -200.
'Changed temp rh sensor from CS105 to CS106.  Multiplier in program was 0.184 offset 600
'Changed temp rh multiplier to 0.24 and offset from 600 to 500
'Temp rh cords for CS105 and 106 do not need to match sensor, they are interchangeable 

'VERSION 6.3 July 26, 2011 Lara Martin and Caitlin Coleman-Hulbert
'Switched PAR to PAR2 and installed a new sensor from Jeff into PAR and replaced Jeff's logger with our own.  Reorient the mast and wind monitor.
'PAR = Primary (DiffCh#4) Mult 1.1692 Sensor in mount added in April
'PAR2 = Secondary (DiffCh#3) Multiplier 1.4809 SEnsor taped to mount

'VERSION 6.2 March 28, 2011 Lara Martin and Jay Poucher
'Changed PAR telemetry output to DiffCh#4 (se7 and se8)
'PAR = Primary (DiffCh#4) Mult 1.4809 Sensor in mount added in April
'PAR2 = Secondary (DiffCh#3) Multiplier 1.3245 SEnsor taped to mount

'VERSION 6.1
'Modified Oct 18th, 2010 to provide par data from a second sensor
'Taped old sensor Q38103 (1.3245) to mount (Par2) in Ch#4.  Added new sensor to center mount model# Q39861 Mult 1.4809 
'added par2 variable
'added units for par2 variable
'added second par 2 measurement on Diff ch# 4 (SE7 & SE8)
'added par data table with both par measuremens within called ParComp

'Modified April 2, 2010 by Lara Martin and Chris Raleigh
'Changed LI190 PAR Sensor Q41616 to Q38110
'Put in new par multiplier of 1.3245 line 355

'VERSION 6
'Last Modified: sept22,2009 bycraleigh & by Jay Poucher
'changed CS106 to CS105 Barometric Pressure Sensor multiplier from 0.24 to .184 & offset from 500 to 600 per:
'		VoltSe(Pressure,1,mV2500,3,1,0,_60Hz,.184,600.0)
'removed par variable
'put in new par multiplier of 1.2997

'NERRS Site: San Francisco
'Location: San Francisco, CA
'Site: Rush Ranch
'NESDIS Assignments:
'ID=3B016066
'Transmit Time = 47:20
'ST MsgWindow = 10 sec
'ST Channel = 152
'ST BPS = 300
'ST Repeat Interval = 1 hour
'ST Offset = 47 minute, 20 secs
'Random Repeat Interval = 0 hour

'NERR Sensor list:
'HMP45AC (6-wire) Temperature & Relative Humidity (se1 se2)
'Campbell CS105 (PTB101B) Barometric Pressure Sensor (se3 on all the time)
'RM Young 5106 Wind Speed & Direction Sensor (p1 se4 ex1)
'Texas Electronics TR-525I Rain Gauge (p2)
'Secondary LI190SZ Quantum Sensor (diff3 == se5 & se6)															(diff3 == se5 & se6)
'Primary LI190SZ Quantum Sensor(diff4 == se7 & se8)

'SFSU Sensor List:
'HFT3 Soil Heat Flux Plate
'Q-&.1 Net Radiometer
'Two 107-L Soil Temperature Probes
'Campbell HMP45AC (7-wire)

'Holds Sensor Calibration Settings for Easy Access in the Numeric Display
PreserveVariables

'For Easy Site Identification in the Data Header (Parseable)
' 	NOTE: this instruction is probably not doing anything as the 
'		variable is stored in the status table but never called

StationName (sfbrrmet)

'Time offset for GMT time
'http://wwp.greenwichmeantime.com/
Const GMTOFFSET=8

'''Declare Public Variables
'  Parameters directly sampled by sensors
Public AirTemp, RHumidity, Pressure, WindSpd, WindDir
Public Precip, par, PAR2, Batt, WindGood As Boolean
Public pTempC, DailyRain '***

' GOES output variables 
Public goesSetResult,goesFailures,gpsLoc(6),gpsTime(7)

' Variables used in max and min subroutine and to calculate timestamps 
Public atMax,atMaxTime,atMin,atMinTime,wsMax,wsMaxTime
Public atMaxTimeSwmp As String,atMinTimeSwmp As String,wsMaxTimeSwmp As String

' Variables used for integer translations in the GOES Output
Public GoesAT,goesATMax,goesATMin,goesRH,goesBP,goesWS,goesWD,goesWSD,goesWSMax,goesPar,goesPrecip,goesBatt,goesDailyRain '***

'Variables used for SFSU Measuements
Public SoilHeat,NetRad,SoilTemp1,SoilTemp2,GrndTemp,GrndRH,GrndSpd

Public Time(9) 'array to store time

'''Define aliases to give array fields more readable names:
Alias time(1) = Year
Alias Time(2) = Month
Alias time(3) = Days
Alias time(4) = Hour
Alias time(5) = Minute
Alias time(6) = Second
Alias time(7) = Microsecond
Alias time(8) = DayofWeek
Alias time(9) = DayofYear

Alias gpsTime(1) = gYear
Alias gpsTime(2) = gMonth
Alias gpsTime(3) = gDay
Alias gpsTime(4) = gHour
Alias gpsTime(5) = gMinute
Alias gpsTime(6) = gSecond
Alias gpsTime(7) = gMicroSecond   

Alias gpsLoc(1) = gpsResult 	'GOESgps instruction result code
Alias gpsLoc(2) = gpsSeconds 	'seconds since Jan 1, 2000
Alias gpsLoc(3) = gpsLat  		'Fractional degrees; 100 nanodegree resolution
Alias gpsLoc(4) = gpsLon			'Fractional degrees; 100 nanodegree resolution
Alias gpsLoc(5) = gpsElev  		'Signed 32-bit number, in centimeters
Alias gpsLoc(6) = gpsMagElev  'Fractional degrees; 1 millidegree resolution 

'''Define units for SWMP data table output
Units AirTemp = C
Units atMax = C
Units atMin = C
Units RHumidity = %
Units Pressure = mb
Units WindSpd = m/s
Units WindDir = deg
Units	Precip = mm
Units PAR = mmoles/m^2
Units PAR2 = mmoles/m^2
Units Batt = Volts
Units DailyRain = mm '***

' Define units of max/min timestamps used in SWMP table
Units atMaxTimeSwmp = hhmm
Units atMinTimeSwmp = hhmm 
Units wsMaxTimeSwmp = hhmm

' Define units of max/min timestamps used in GOES table
Units atMaxTime = hhmm
Units atMinTime = hhmm  
Units wsMaxTime = hhmm

' Define units for GOES data table output
Units goesAT = C
Units goesATMax = C
Units goesATMin = C
Units goesRH = %
Units goesBP = mb
Units goesWS = m/s
Units goesWD = Deg
Units goesWSD = m/s
Units goesWSMax = m/s
Units goesPrecip = mm
Units goesBatt = Volts
Units goesDailyRain = mm '***
Units goesPar = mmoles/m^2 '***

'''Define Data Tables:
' The SWMP data table definition:
DataTable (SWMP,1,-1)
	DataInterval (0,15,min,10)
	Average (1,AirTemp,IEEE4,False)
	FieldNames("ATemp") 'instruction is used to output desired fieldnames in output table headers
	Sample (1,atMax,IEEE4)
	FieldNames("MaxTemp")
	Sample (1,atMaxTimeSwmp,String)
	FieldNames ("MaxTempT")
	Sample (1,atMin,IEEE4)
	FieldNames("MinTemp")
	Sample (1,atMinTimeSwmp,String)
	FieldNames("MinTempT")
	Average (1,RHumidity,IEEE4,False)
	FieldNames("RH")
	Average (1,Pressure,IEEE4,False)
	FieldNames("BP")
	WindVector (1,WindSpd,WindDir,IEEE4,WindGood,0,0,0)'MOD**
	FieldNames("WSpd,Wdir,SDWDir")
	Sample (1,wsMax,IEEE4)
	FieldNames("MaxWSpd")
	Sample (1,wsMaxTimeSwmp,String)
	FieldNames("MaxWSpdT")
	Totalize (1,Precip,IEEE4,False)
	FieldNames("TotPrcp")
	Totalize(1,PAR,IEEE4,False)
	FieldNames("TotPAR")
	Average (1,Batt,IEEE4,False)
	FieldNames("AvgVolt")
	Sample(1,DailyRain,IEEE4) '***
	FieldNames("CumPrcp") '***
EndTable

' The Goes Output Data Table Def
DataTable (GOESOUT,1,-1)
	DataInterval (0,15,min,10)
	Average(1,goesAT,IEEE4,False)
	FieldNames("G_ATemp")
	Sample(1,goesATMax,IEEE4)
	FieldNames("G_MaxTemp")
	Sample(1,atMaxTime,IEEE4)
	FieldNames("G_MaxTempT")
	Sample(1,goesATMin,IEEE4)
	FieldNames("G_MinTemp")
	Sample(1,atMinTime,IEEE4)
	FieldNames("G_MinTempT")
	Average (1,goesRH,IEEE4,False)
	FieldNames("G_RH")
	Average (1,goesBP,IEEE4,False)
	FieldNames("G_BP")
	Sample (1,goesWS,IEEE4)
	FieldNames("G_WSpd")
	Sample (1,goesWD,IEEE4)
	FieldNames("G_Wdir")
	Sample (1,goesWSD,IEEE4)
	FieldNames("G_SDWDir")
	Sample(1,goesWSMax,IEEE4)
	FieldNames("G_MaxWSpd")
	Sample(1,wsMaxTime,IEEE4)
	FieldNames("G_MaxWSpdT")
	Totalize (1,goesPrecip,IEEE4,False)
	FieldNames("G_TotPrcp")
	Totalize (1,goesPar,IEEE4,False)
	FieldNames("G_TotPAR")
	Average (1,goesBatt,IEEE4,False)
	FieldNames("G_AvgVolt")
	Sample(1,GOESDailyRain,IEEE4) '***
	FieldNames("G_CumPrcp") '***
EndTable

' The Par Data Comparsion table definition:
DataTable (ParComp,1,-1)
	DataInterval (0,15,min,10)
		Totalize(1,par,IEEE4,False)
	FieldNames("TotPAR")
		Totalize(1,PAR2,IEEE4,False)
	FieldNames("TotPAR2")
EndTable

' Fifteen Min Avg and Standard Deviation for all parameters for San Fransico State University
DataTable(SFSU,1,-1)
	DataInterval(0,15,min,10)
	Average (1,AirTemp,IEEE4,False)
	Average (1,RHumidity,IEEE4,False)
	Average (1,Pressure,IEEE4,False)
	Average (1,WindSpd,IEEE4,False)
	WindVector (1,WindSpd,WindDir,IEEE4,WindGood,0,0,0)
	Totalize (1,Precip,IEEE4,False)
	Average (1,PAR,IEEE4,False)
	Minimum (1,Batt,FP2,False,False)
	Average (1,SoilTemp1,IEEE4,False)
	Average (1,SoilTemp2,IEEE4,False)
	Average (1,NetRad,IEEE4,False)
	Average (1,SoilHeat,IEEE4,False)
	Average (1,GrndTemp,IEEE4,False)
	Average (1,GrndRH,IEEE4,False)
	Average (1,GrndSpd,IEEE4,False)
	StdDev (1,AirTemp,IEEE4,False)
	StdDev (1,RHumidity,IEEE4,False)
	StdDev (1,Pressure,IEEE4,False)
	StdDev (1,WindSpd,IEEE4,False)
	StdDev (1,SoilTemp1,IEEE4,False)
	StdDev (1,SoilTemp2,IEEE4,False)	
	StdDev (1,NetRad,IEEE4,False)
	StdDev (1,SoilHeat,IEEE4,False)
	StdDev (1,GrndTemp,IEEE4,False)
	StdDev (1,Grndrh,IEEE4,False)
	StdDev (1,GrndSpd,IEEE4,False)
EndTable

'''Subroutines:
' Sub to calculate max/min and timestamps for SWMP table (goes integer values are derived from)
Sub MaxMin
	If AirTemp < atMin Then 	'Track Min and time of Min air temp
		atMin = AirTemp
		RealTime(time())
		atMinTime = Hour*100+Minute 'time formatted as integer for GOES table
		atMinTimeSwmp = Hour + ":" + Minute 'time formatted as string for SWMP table
	EndIf
	If AirTemp > atMax Then	'Track Max and time of Max air temp
		atMax = AirTemp
		RealTime(time())
		atMaxTime = Hour*100+Minute
		atMaxTimeSwmp = Hour + ":" + Minute
	EndIf
	If WindSpd > wsMax Then	'Track Max and time of max wind
		wsMax = WindSpd
		RealTime(time())
		wsMaxTime = Hour*100+Minute
		wsMaxTimeSwmp = Hour + ":" + Minute
	EndIf
EndSub

' Sub to setup for the GOES TX312 transmitter
Sub setup
	GOESSetup (GOESsetResult,&H3B016066,10,152,300,0,100,"0_1_0_0","0_47_20","0_0_0")
EndSub

'Main Program
BeginProg
	'Initialize Min & Max Variables
	atMin = 20000
	atMax = -20000
	wsMax = -20000
	'initialize so goes setup subroutine will be called on first run of program
	goesSetResult = -1
	'Scan Rate
	Scan (5,Sec,0,0)
	
	'''Begin SFNERR sensor settings
		'Reference Temperature in C and Battery Voltage in Volts
		PanelTemp (PTempC,250)
		Battery (Batt)
		'HMP45AC (6-wire) Temperature & Relative Humidity Sensor measurements "AirTemp" in C & "RHumidity" in %
		PortSet (9,1)
		Delay(0,150,mSec)
		VoltSe(AirTemp,1,mV2500,1,0,0,_60Hz,0.1,-40.0)
		VoltSe(RHumidity,1,mV2500,2,0,0,_60Hz,0.1,0)
		PortSet (9,0)

		'CS105 Barometric Pressure Sensor measurement "Pressure" in mb on all the time...
		VoltSe(Pressure,1,mV2500,3,1,0,_60Hz,0.240,500)

		'RM Young 5106-5 Wind Speed & Direction Sensor measurements Wind_Spd in ms & Wind_Dir in Degrees
		PulseCount(WindSpd,1,1,1,1,0.098,0)
		If WindSpd = NAN Then 
			WindGood = true
				Else
					WindGood = false
				EndIf
		ExciteV (Vx1,2500,200)
		BrHalf(WindDir,1,mV2500,4,1,1,2500,True,0,_60Hz,355,0)
		If WindDir>=360 Then WindDir=0

		'Texas Electronics TR-525I Rain Gauge measurement Precip in mm
		PulseCount(Precip,1,2,2,0,0.254,0)
		DailyRain = DailyRain+Precip '***

		'Primary LI190SZ Quantum Sensor measurements PAR DiffCh#4:
		VoltDiff(par,1,mV25,4,True,0,_60Hz,-1.0,0)

		'LI190SZ Quantum Sensor measurements PAR DiffCh#3:
		VoltDiff(PAR2,1,mV25,3,True,0,_60Hz,1.4809,0)

		 

'Measurements for SFSU Sensors 
		'HFT3 Soil Heat Flux Plate "SoilHeat"(Diff=8)
		' Black - 8H, White 8L, Clear GND
		VoltDiff (SoilHeat,1,mV7_5,8,True ,0,_60Hz,1.0,0)
		
		'Q-&.1 Net Radiometer "NetRad:(Dif=7)
		'Red - 7H, Black - 7L, Jumper Wire connects 7L and AG, Clear - G
		'use instruction logic from CR10X programming
		VoltDiff (NetRad,1,mV250,7,True ,0,_60Hz,1.0,0)
		If NetRad >= 0 Then
			NetRad = NetRad * 8.7
			Else
			NetRad = NetRad * 10.82
		EndIf
		
		'Two 107-L Soil Temperature Probes "SoilTemp"(SE11)
		'1st sensor: Black - EX2, Red - SE11, Purple - AG(G symbol), Clear - GND
		'2nd sensor: Black - EX2, Red - SE12, Purple - AG(G symbol), Clear - GND
		Therm107 (SoilTemp1,1,11,Vx2,0,_60Hz,1.0,0)
		Therm107 (SoilTemp2,1,12,Vx2,0,_60Hz,1.0,0)
		
		'Campbell HMP45AC (7-wire) Temperature & Relative Humidity Sensor measurements "GrndTemp"&"GrndRH"(SE9 &SE10)
		'Temp Signal (Yellow) SE9, RH Signal (Blue) SE10, White Ground Symbol, Power Red SW12,
		'Black Ground Symbol, Shield Ground Symbol
		PortSet (9,1)
		Delay(0,150,msec)
		VoltSe(GrndTemp,1,mV2500,9,0,0,_60Hz,0.1,-40.0)
		VoltSe(GrndRH,1,mV2500,10,0,0,_60Hz,0.1,0)
		PortSet (9,0)
		If GrndRH>100 AND GrndRH<108 Then GrndRH=100
		
		'Met One wind speed measurement for Ground Wind Speed "GrndSpd" Unsing Control Port 8 as a pulse counter
		PulseCount(GrndSpd,1,18,2,1,0.8,.447)
		If Grndspd=.447 Then GrndSpd=0

'''End sensor settings

		'Reset station clock using GPS clock
		If TimeIntoInterval (722,1440,min) Then	'at two minutes past noon set clock to gps clock
			GOESGPS (gpsloc(),gpsTime())
			If gpsResult=0AND gHour<24AND gHour>=0AND gMinute<60AND gMinute>=0AND gSecond<60AND gSecond>=0 Then
				gHour = gHour - GMTOFFSET 'adjust clock in GMT to local time
				If gHour<0 Then
					gHour=gHour+24
				EndIf
				ClockSet (gpsTime())
			EndIf
		EndIf
		
		Call MaxMin		'track airTempMax, airTempMin, wsMax and times
		
		CallTable SWMP
		
		'Convert and store as integers for GOES transmission (only those not already integers)
		goesBatt = Batt * 100
		goesAT = AirTemp * 100
		goesATMAx = atMax * 100
		goesATMin = atMin * 100
		goesRH = RHumidity * 10
		goesBP = Pressure * 10
		goesPrecip = Precip * 1000
		goesPar = Par
		goesWSMax = wsMax * 100
		goesDailyRain = DailyRain*1000 '***
		
		'following must be called only after Fiftnmin table written to because 
		'   values are generated by WindVector instruction
		goesWS = SWMP.WSpd*100
		goesWD = SWMP.Wdir*10
		goesWSD = SWMP.SDWDir*10

		CallTable GOESOUT
		'CallTable SFSU
		CallTable ParComp
		
		'GOES Instructions
		'		send to transmitter at time atleast 2 minutes before transmit time
		If TimeintoInterval (45,60,Min) then
			GOESData (goesFailures,GOESOUT,0,1,2)
		endif
		
		'Run setup subroutine if GOESSetResult is anything other than 0
		if goesSetResult then call setup

		if TimeintoInterval(0,15,min) then	'After Min and Max are written by MaxMin sub
			atMin = 20000		'reset initial conditions for temp min and max and wind spd max
			atMax = -20000
			wsMax = -20000
		endif

		'reset all daily rain values to 0 every 24 hours
		if iftime(0,1440,min) then DailyRain = 0 '***
		if iftime(0,1440,min) then goesDailyRain = 0 '***
		
	NextScan
EndProg



