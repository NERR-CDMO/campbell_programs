'VERSION 5.0
'Last Modified: February 27, 2008 by Jay Poucher, 
'   date and time of downloading program to logger denoted by
'      [mo/da/yr hr:mn} with time in EST

'Version 5.0 changes, Search for '*** to display these additions
'Added 24 hour rain total (DailyRain) to SWMP table
'Applied a new Field Name for Daily Rain as CumPrcp
'Made GOESDailyRain = DailyRain*1000 output for transmission
'Added Variable GOESDailyRain to public
'Set Units for GOESDailyRain and DailyRain to mm
'Applied a new Field Name for GOESDaily Rain as G_CumPrcp
'Reset DailyRain to Zero at midnight
'Reset GOESDailyRain to Zero at midnight
'Changed "Day" to "Days" in Alias time(3) due to conflict with new CR1000 Firmware
' 03/24/2008 - Dick Payne
'   - Replace Eppley 8-48 with new cal, 90.334
' 04/05/08 - Jay Poucher
'   - Replace Goespar = PAR*100 with Goespar = PAR
' 05/12/2008 - Dick Payne
'   - Replace Li-Cor sensor cal constant
' 06/14/08 - Dick Payne
'   - Calibrate Vaisala RH/AT and put new constants in program
' [06/30/14 13:00]
'   Reinstall RH/AT, tower back up at 14:00. Install new program version at 14:12.
' 06/16/2008 - Dick Payne
'   - Make SWMP table as original in version 5.5
'   - Put new parameters in A5Min table
' 06/24/08 - Dick Payne
'   - Add another parameter to the A5min table and reorder them.
' 12/24/08 - Dick Payne (081231 version)
'   - Delete RadRatio from GOES table
'   - Add Sorad to SWMP table
'   - Change PAR and Sorad statements in SWMP and GOES tables from TOTALIZE to AVERAGE
'     and change units appropriately
'   - Change GOESSorad multiplier from 100 to 1
'   - Corrected Sample statement for Dailyrain in A5Min table
' 01/06/09 - Dick Payne
'   - Corrected name of total sorad for A5min table
' 02/19/09 - Dick Payne
'   - Reinstall Q38878 PAR after repair and recalibration, update cal constant
' 05/01/09 - Dick Payne
'   - GOES PAR and SORAD not reporting. Found parameters mislabelled. Changed to:
'     goesPAR = PARs    goesSorad = Sorads
' 05/21/09 - Dick Payne
'   - Add Daily Rain to SWMP table
' 05/22/09 - Dick Payne
'   - Change PARs multiplier from 0.416 to 416.0 to give micromoles/s/m^2
' 05/26/09 - Dick Payne
'   - Change goesPAR = TotPAR and goesSorad = TotSorad to give 15 min totals of
'     both in the GOES table
'   - Correct PARt to be TotPAR in the A5min table
'   - Change PARs multiplier to 0.416 to give units of mmole/m^2-sec
' 06/02/09 - Dick Payne
'   - Correct PARs multiplier from 0.416 to 0.2153
' 06/17/09 - Dick Payne
'   - Calibrate BP, RH, AT and enter new constants in program
' 07/06/09 - Dick Payne
'   - Change PAR multiplier from 0.2153 to 215.3 and units from mmole to micromole
'   - Delete notes for previous major versions
' 08/11/09 - Dick Payne
'   - Sorted out PAR units. Instaneous and averaged PAR is in micromol/s-m**2. 5 and 15 minute
'     totals are in millimol/s-m*2. This required adding factor /1000 to TotPAR = 5*PARs to make
'     TotPAR = 5*PARs/1000
' 07/14/10 - Dick Payne
'   - Calibrate spare BP sensor, PTA427 and substitute for other Vaisala
'   - Substitute fresh Li-Cor PAR sensor Q40726
'   - Calibrate Vaisala HMP45A RH/AT sensor
' 08/20/2010 - Dick Payne
'   - Change BP range from mV2500 to mV5000
' 10/29/2010 - Dick Payne
'   - Add TSorad parameter = 0.25 * Sorads. It is 15 minute total. Change units of SWMP
'     to TSorad watt-hr/m^2 
' 11/02/28 - Dick Payne
'   - Change bias in rh statement 20.67 -> 2.67
' 08/02/2011 - Dick Payne
'   - Update constants for rh, at, bp to results of today's calibrations
'   - Replace propellor shaft bearings in anemometer
' 09/06/2011 - Dick Payne
'   - Constants for new Li-Cor PAR
' 09/09/2011 - Dick Payne
'   - Add minus sign to PAR constant
' 06/26/2012 - Dick Payne
'   - Update constants for Vaisala RH/AT and constants for barometer.
' 09/21/2012 - Dick Payne
'   - Correct decimal points in multiplier and offset for BP sensor\
'     and switch order
'02/20/2015 - Jordan Mora
'		- Removed Tsorad from the program. Tsorad (Eppley 8-48) has been displaying in wrong units 
'			and is being removed from the station.  
'02/24/2015 - Michelle Cordrey
'    -Revised code to match SWMP SOP standards:
'    -Changed SWMP table to totalize PAR values (was averaging)
'    -Changed PAR multiplier in sensor instruction to output mmoles/m^2
'    -Commented out instructions and no longer used variables concerning total radiation sensor and averaged PAR values
'    -Changed variable name PARs to PAR to match SWMP protocol
'03/20/2015 - Michelle Cordrey
'    -Changed Units label instruction for PAR to correct units:  mmoles/m^2
'    -Changed PAR multiplier back to -264.77  for millivolt adapter (multiplier taken directly from LiCor cal sheet)
'    -Uncommented PAR conversion to correct units for millivolt adaapter  

'Sensor list (ports/channels used in prog):
'HMP45A Temperature & Relative Humidity SN A4940008	(se1 se2)
'   Blue wire +12V
'   Red wire G
'   Orange wire SE1 AT
'   Brown wire SE2 RH
'Vaisala PTB427 (SN 432843) Barometric Pressure Sensor	(se3 on all the time)
'   Red wire +12V
'   Brown wire SE3 BP
'   Black wire G
'   White wire G
'RM Young 5103-5 Wind Speed & Direction Sensor  (p1 se4 ex1)
'   White wire P1 WS
'   Black wire G WS
'   Red wire E1 WD
'   Green wire SE4 WD
'   Orange wire G
'Texas Electronics TR-525I Rain Gauge			(p2)
'   Red wire P2
'   Black wire G
'   Cable shield G								
'LI190SZ Quantum Sensor							(diff3 == se5 se6)
'   Black wire 3H
'   Red wire 3L
'Eppley 8-48 short wave radiation		        (se7 se8)
'   Red wire 4H
'   Black wire 4L

'***REMEMBER TO SET PAR MULTIPLIER IN PUBLIC TABLE****

'Holds Sensor Calibration Settings for Easy Access in the Numeric Display
PreserveVariables

'For Easy Site Identification in the Data Header (Parseable)
' 	NOTE: this instruction is probably not doing anything as the 
'		variable is stored in the status table but never called

StationName (WQBCHMET)

'Time offset for GMT time
'http://wwp.greenwichmeantime.com/
Const GMTOFFSET=5

'''Declare Public Variables
'  Parameters directly sampled by sensors
Public AirTemp, RHumidity, Pressure, WindSpd, WindDir, Precip, Batt
Public DailyRain '***
Public pTempC, WindGood as boolean'MOD**
'Public parMultiplier
'Public TotalRad, RadRatio, TotPAR
Public PAR
'Public eppMultiplier 'uncomment if eppley pyrometer is installed
'EnclosureRH 	     'uncomment if relative humidity sensor installed in enclosure
' GOES output variables 
Public goesSetResult,goesFailures,gpsLoc(6),gpsTime(7)

' Variables used in max and min subroutine and to calculate timestamps 
Public atMax,atMaxTime,atMin,atMinTime,wsMax,wsMaxTime
Public atMaxTimeSwmp as string,atMinTimeSwmp as string,wsMaxTimeSwmp as string

' Variables used for integer translations in the GOES Output
Public goesAT,goesATMax,goesATMin,goesRH,goesBP,goesWS,goesWD,goesWSD,goesWSMax,
Public goesPrecip,goesBatt,goesDailyRain
Public goesPAR, goesRadRatio
Public Time(9) 'array to store time

'''Define aliases to give array fields more readable names:
Alias time(1) = Year
Alias time(2) = Month
Alias time(3) = Days
Alias time(4) = Hour
Alias time(5) = Minute
Alias time(6) = Second
Alias time(7) = Microsecond
Alias time(8) = DayofWeek
Alias time(9) = DayofYear

Alias gpsTime(1) = gYear
Alias gpsTime(2) = gMonth
Alias gpsTime(3) = gDay
Alias gpsTime(4) = gHour
Alias gpsTime(5) = gMinute
Alias gpsTime(6) = gSecond
Alias gpsTime(7) = gMicroSecond   

Alias gpsLoc(1) = gpsResult 	'GOESgps instruction result code
Alias gpsLoc(2) = gpsSeconds 	'seconds since Jan 1, 2000
Alias gpsLoc(3) = gpsLat  		'Fractional degrees; 100 nanodegree resolution
Alias gpsLoc(4) = gpsLon		  'Fractional degrees; 100 nanodegree resolution
Alias gpsLoc(5) = gpsElev  		'Signed 32-bit number, in centimeters
Alias gpsLoc(6) = gpsMagElev  'Fractional degrees; 1 millidegree resolution 

' Define units for A5Min table
'Units PARs = umoles/m^2-sec
'Units Sorads = watt/m^2
'Units TotPar = mmoles/m^2
'Units TotSorad = watt-hr/m^2

'''Define units for SWMP data table output
Units AirTemp = C
Units atMax = C
Units atMin = C
Units RHumidity = %
Units Pressure = mb
Units WindSpd = m/s
Units WindDir = deg
Units Precip = mm
Units DailyRain = mm
'Units PAR = umoles/m^2-sec
Units PAR = mmoles/m^2
'Units TSorad = watt-hr/m^2
Units Batt = Volts

' Define units of max/min timestamps used in SWMP table
Units atMaxTimeSwmp = hhmm
Units atMinTimeSwmp = hhmm 
Units wsMaxTimeSwmp = hhmm

' Define units of max/min timestamps used in GOES table
Units atMaxTime = hhmm
Units atMinTime = hhmm  
Units wsMaxTime = hhmm

' Define units for GOES data table output
Units goesAT = C
Units goesATMax = C
Units goesATMin = C
Units goesRH = %
Units goesBP = mb
Units goesWS = m/s
Units goesWD = Deg
Units goesWSD = m/s
Units goesWSMax = m/s
Units goesPrecip = mm
Units goesPAR = mmoles/m^2
'Units goesSorad = w-hr/m^2
Units goesBatt = Volts
Units goesDailyRain = mm '***

'''Define Data Tables:
' The SWMP data table definition:
DataTable (SWMP,1,-1)
	DataInterval (0,15,min,10)
	Average (1,AirTemp,IEEE4,False)
	FieldNames("ATemp") 'instruction is used to output desired fieldnames
	Sample (1,atMax,IEEE4)
	FieldNames("MaxTemp")  ' in output table headers
	Sample (1,atMaxTimeSwmp,String)
	FieldNames ("MaxTempT")
	Sample (1,atMin,IEEE4)
	Fieldnames("MinTemp")
	Sample (1,atMinTimeSwmp,String)
	Fieldnames("MinTempT")
	Average (1,RHumidity,IEEE4,False)
	Fieldnames("RH")
	Average (1,Pressure,IEEE4,False)
	Fieldnames("BP")
	WindVector (1,WindSpd,WindDir,IEEE4,WindGood,0,0,0)'MOD**
	Fieldnames("WSpd,Wdir,SDWDir")
	Sample (1,wsMax,IEEE4)
	Fieldnames("MaxWSpd")
	Sample (1,wsMaxTimeSwmp,String)
	FieldNames("MaxWSpdT")
	Totalize (1,Precip,IEEE4,False)
	FieldNames("TotPrcp")
	Sample(1,DailyRain,IEEE4) '***
	FieldNames("G_CumPrcp") '***
	Totalize(1,PAR,IEEE4,False)
	FieldNames("TotPAR")
'	Average(1,Sorads,IEEE4,False)
'	FieldNames("TSorad")
	Average (1,Batt,IEEE4,False)
	FieldNames("AvgVolt")
EndTable

' The Goes Output Data Table Def
DataTable (GOESOUT,1,-1)
	DataInterval (0,15,min,10)
	Average(1,goesAT,IEEE4,False)
		Fieldnames("G_ATemp")
	Sample(1,goesATMax,IEEE4)
		Fieldnames("G_MaxTemp")		
	Sample(1,atMaxTime,IEEE4)	
		Fieldnames("G_MaxTempT")
	Sample(1,goesATMin,IEEE4)		
		Fieldnames("G_MinTemp")
	Sample(1,atMinTime,IEEE4)	
		Fieldnames("G_MinTempT")
	Average(1,goesRH,IEEE4,False)
		Fieldnames("G_RH")			
	Average(1,goesBP,IEEE4,False)
		FieldNames("G_BP")
	Sample(1,goesWS,IEEE4)
		Fieldnames("G_WSpd") 
	Sample(1,goesWD,IEEE4)
		Fieldnames("G_Wdir") 
	Sample(1,goesWSD,IEEE4)
		Fieldnames("G_SDWDir") 
	Sample(1,goesWSMax,IEEE4)		
		Fieldnames("G_MaxWSpd")
	Sample(1,wsMaxTime,IEEE4)	
		Fieldnames("G_MaxWSpdT")
	Totalize(1,goesPrecip,IEEE4,False)
		FieldNames("G_TotPrcp")
	Totalize(1,goesPAR,IEEE4,False)
		FieldNames("G_PAR")
	Average(1,goesBatt,IEEE4,False)	
		FieldNames("G_AvgVolt")	
	Sample(1,goesDailyRain,IEEE4) '***
		FieldNames("G_CumPrcp") '***
'	Totalize(1,goesSorad,IEEE4,False)
'	FieldNames("G_Sorad")	
EndTable

'Five Min Table
DataTable (A5Min,True,-1)
	DataInterval(0,5,Min,10)
	Average(1,Batt,IEEE4,False)
	FieldNames("bv")
	Average(1,AirTemp,IEEE4,False)
	FieldNames("at")
	Average(1,RHumidity,IEEE4,False)
	Fieldnames("rh")
	Average(1,Pressure,IEEE4,False)
	Fieldnames("bp")
	Average(1,WindSpd,IEEE4,False)
	Fieldnames("ws")
	Sample(1,WindDir,IEEE4)
	Fieldnames("wd")
' Average(1,PARs,IEEE4,False)
'	FieldNames("PAR")
	Totalize(1,PAR,IEEE4,False)
	FieldNames("PARt")            '****
'	Average(1,Sorads,IEEE4,False)
'	FieldNames("Sorads")
'	Totalize(1,TotSorad,IEEE4,False)
'	FieldNames("Soradt")
'	Average(1,RadRatio,IEEE4,False)
'	Fieldnames("RadRat")
	Totalize (1,Precip,IEEE4,False)
	Fieldnames("Prec")
	Sample (1,Dailyrain,IEEE4)
	FieldNames("CumPrcp")
EndTable

'''Subroutines:
' Sub to calculate max/min and timestamps for SWMP table
'    (goes integer values are derived from)
Sub MaxMin
	If AirTemp < atMin Then 	'Track Min and time of Min air temp
		atMin = AirTemp
		Realtime(time())
		atMinTime = Hour*100+Minute 'time formatted as integer for GOES table
		atMinTimeSwmp = Hour + ":" + Minute 'time formatted as string for SWMP table
	Endif
	If AirTemp > atMax then	'Track Max and time of Max air temp
		atMax = AirTemp
		Realtime(time())
		atMaxTime = Hour*100+Minute
		atMaxTimeSwmp = Hour + ":" + Minute
	Endif
	If WindSpd > wsMax then	'Track Max and time of max wind
		wsMax = WindSpd
		Realtime(time())
		wsMaxTime = Hour*100+Minute
		wsMaxTimeSwmp = Hour + ":" + Minute
	EndIf
Endsub

' Sub to setup for the GOES TX312 transmitter
Sub setup
	GOESSetup (goesSetResult,&H3B022462,10,145,300,0,100,"0_1_0_0","0_1_50","0_0_0")
EndSub

'Main Program
BeginProg
	'Initialize Min & Max Variables
	atMin = 20000
	atMax = -20000
	wsMax = -20000
	'initialize so goes setup subroutine will be called on first run of program
	goesSetResult = -1
	'Scan Rate
	Scan (5,Sec,0,0)
	
	'''Begin sensor settings
		'Reference Temperature in C and Battery Voltage in Volts
		PanelTemp (PTempC,250)
		Battery (Batt)
		'Convert and Store as Integer for Transmission

		'HMP45A Temperature & Relative Humidity Sensor measurements
        '   "AirTemp" in C & "RHumidity" in %RH
		'   HPM45A S/N A4940008
		'   Calibration: 26 June 2012
		VoltSe(AirTemp,1,mV2500,1,0,0,_60Hz,0.101188,-40.38)
		VoltSe(RHumidity,1,mV2500,2,0,0,_60Hz,0.110572,-4.25)

		'Vaisala PTB101B Barometric Pressure Sensor measurement
        '   "Pressure" in mb on all the time...
		'   Vaisala PTP101B S/N P5240006
		'   Calibration: 26 June 2012
		VoltSe(Pressure,1,mv5000,3,1,0,_60Hz,.184071,593.47)

	'RM Young	5103-5 Wind Speed & Direction Sensor measurements
    '   Wind_Spd in ms & Wind_Dir in Degrees
		PulseCount(WindSpd,1,1,1,1,0.098,0)
		If WindSpd = NAN then'MOD**
			WindGood = true'MOD**
		Else'MOD**
			WindGood = false'MOD**
		Endif'MOD**
		ExciteV (Vx1,2500,200)
		BrHalf(WindDir,1,mV2500,4,1,1,2500,True,0,_60Hz,355,0)
		If WindDir>=360 Then WindDir=0

		'Texas Electronics TR-525I Rain Gauge measurement Precip in mm
		PulseCount(Precip,1,2,2,0,0.254,0)
		DailyRain = DailyRain+Precip '***

		'LI190 Quantum Sensor measurements PAR:
		'   S/N Q45963, cal 08/24/2011 Li-Cor
    '		PAR has units mmoles/m^2:
    '   has millivolt adapter attached ?
		VoltDiff(PAR,1,mV25,3,True,0,_60Hz,-264.77,0)
		'Multiply PAR by 5/1000 to get 5 sec total flux in mmole/m2
		'  Comment out following line if sensor model is changed!!!
    PAR = 5*PAR/1000
    
    'Eppley Pyranometer measurements EppleyPyr:
    '   Eppley Model 8-48 S/N 9898
    '   Calibration: 10 March 2008
    '   Cal constant is 90.3342 w/m2/mV
	   ' VoltDiff(Sorads,1,mV25,4,1,0,_60Hz,90.3342,0.0)
    '	If Sorads<0 Then Sorads=0
    'RadRatio - PAR/Srad
    '	If Sorads>10 Then
    '  		RadRatio = PARs / Sorads
    '	Else
    '  		RadRatio = 0
    '	EndIf
    'Multiply Sorad by 5/3600 to get 5 sec total flux in w-hr/m2
    'Multiply PAR by 5/1000 to get 5 sec total flux in mmole/m2
    '	TotPAR = 5*PARs/1000
    '	TotSorad = 0.0013889*Sorads
    '	TSorad = 0.25*Sorads
    		
'''End sensor settings

		'Reset station clock using GPS clock
		If TimeintoInterval (722,1440,min) then	'at two minutes past noon set clock to gps clock
			GOESGPS (gpsloc(),gpsTime())
			If gpsResult=0and gHour<24and gHour>=0and gMinute<60and gMinute>=0and gSecond<60and gSecond>=0 then
				gHour = gHour - GMTOFFSET 'adjust clock in GMT to local time
				If gHour<0 then
					gHour=gHour+24
				Endif
				ClockSet (gpsTime())
			Endif
		Endif
		
		Call MaxMin		'track airTempMax, airTempMin, wsMax and times
		
		CallTable SWMP
		CallTable A5Min 'site specific table with EppleyPyr variable
		
		'Convert and store as integers for GOES transmission (only those not already integers)
		
		goesAT = AirTemp * 100 
		goesATMAx = atMax * 100
		goesATMin = atMin * 100 
		goesRH = RHumidity * 10	
		goesBP = Pressure * 10	
		goesWSMax = wsMax * 100
		goesPrecip = Precip * 1000
		goesPAR = PAR
		goesBatt = Batt * 100 
		goesDailyRain = DailyRain*1000 '***		
	'	goesSorad = TotSorad
		
		'following must be called only after SWMP table written to because 
		'   values are generated by WindVector instruction
		goesWS = SWMP.WSpd*100
		goesWD = SWMP.Wdir*10
		goesWSD = SWMP.SDWDir*10

		CallTable GOESOUT
		
		'GOES Instructions
		'		send to transmitter at time atleast 2 minutes before transmit time
		If TimeintoInterval (59,60,Min) then
			GOESData (goesFailures,GOESOUT,0,1,2)
		Endif
		
		'Run setup subroutine if GOESSetResult is anything other than 0
		If goesSetResult then call setup

		If TimeintoInterval(0,15,min) then	'After Min and Max are written by MaxMin sub
			atMin = 20000		'reset initial conditions for temp min and max and wind spd max
			atMax = -20000
			wsMax = -20000
		endif

		'reset all daily rain values to 0 every 24 hours
		If IfTime(0,1440,min) Then DailyRain = 0 '***
		If IfTime(0,1440,min) Then goesDailyRain = 0 '***
		
	NextScan
EndProg


