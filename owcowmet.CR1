'VERSION 5.5

'Last Modified: December 19, 2013 by Michael G. Mensinger
'Changed offset value For CS-106 barometric Pressure sensor from 500 To 522 on line 330 

'Last Modified: September 5th, 2013 by Michael G. Mensinger
'Changed program number version back to 5.5 and made other changes to program name in order to conform with NERRS SWMP MET program naming convention
'Changed PAR Multiplier from 1.3777 to 1.15134 to coincide with PAR sensor swap.


'VERSION 6.1
'Last Modified: March 19th, 2012 by Michael G. Mensinger
'Replaced CS-105 Barometric Pressure Sensor code with CS-106 code:
' Replaced HMP45C Temperature/Humidity Sensor code with HC2S3 code:
'Changed Temp/RH Power wiring from SW-12V to 12V
'Changed PAR Multiplier to 1.3777 on 04/18/2012

'VERSION 6.0
'Last Modified: November 10th, 2010 by Jay Poucher
'removed old Par Mult of 1.34192 set on 9/3/09
'Set fixed Multiplier of 1.1894 into code for new Par sensor on line #330

'NERRS Site: Old Woman Creek Reserve
'Location: Huron, OH
'Site: Old Woman Creek
'NESDIS Assignments:
'ID=3B017310
'Transmit Time (mm:ss after the hour) = 0:00
'ST MsgWindow = 10 sec
'ST Channel = 145
'ST BPS = 300
'Random Channel = 0
'Random BPS = 0
'ST Repeat Interval = 1 hour
'ST Offset = 0 minute, 0 secs
'Random Repeat Interval = 0 hour

'Sensor list (ports/channels used in prog):
'HC2S3 Temperature & Relative Humidity 	            (se1 & se2, 12V)
'Vaisala PTB101B Barometric Pressure Sensor  				(se3, on all the time)
'RM Young 5103-5 Wind Speed & Direction Sensor 			(p1 & se4 ex1)
'MET ONE 385 Rain Gauge 														(p2)
'LI190SZ Quantum Sensor 														(diff3 == se5 se6)

'Holds Sensor Calibration Settings for Easy Access in the Numeric Display
PreserveVariables

'For Easy Site Identification in the Data Header (Parseable)
' 	NOTE: this instruction is probably not doing anything as the 
'		variable is stored in the status table but never called

StationName (owcowmet)

'Time offset for GMT time
'http://wwp.greenwichmeantime.com/
const GMTOFFSET=5

'''Declare Public Variables
'  Parameters directly sampled by sensors
Public AirTemp, RHumidity, Pressure, WindSpd, WindDir, Precip, PAR, Batt, WindGood as boolean'MOD**
Public pTempC, DailyRain '***
'Public TotalRad, totRadMultiplier 		'uncomment if total radiation sensor installed (remember to add to tables)
'Public EppleyPyr, eppMultiplier 'uncomment if eppley pyrometer is installed
'EnclosureRH 	     'uncomment if relative humidity sensor installed in enclosure

' GOES output variables 
Public goesSetResult,goesFailures,gpsLoc(6),gpsTime(7)

' Variables used in max and min subroutine and to calculate timestamps 
Public atMax,atMaxTime,atMin,atMinTime,wsMax,wsMaxTime
Public atMaxTimeSwmp as string,atMinTimeSwmp as string,wsMaxTimeSwmp as string

' Variables used for integer translations in the GOES Output
public GoesAT,goesATMax,goesATMin,goesRH,goesBP,goesWS,goesWD,goesWSD,goesWSMax,goesPar,goesPrecip,goesBatt,goesDailyRain '***

Public Time(9) 'array to store time

'''Define aliases to give array fields more readable names:
Alias time(1) = Year
Alias time(2) = Month
Alias time(3) = Days
Alias time(4) = Hour
Alias time(5) = Minute
Alias time(6) = Second
Alias time(7) = Microsecond
Alias time(8) = DayofWeek
Alias time(9) = DayofYear

Alias gpsTime(1) = gYear
Alias gpsTime(2) = gMonth
Alias gpsTime(3) = gDay
Alias gpsTime(4) = gHour
Alias gpsTime(5) = gMinute
Alias gpsTime(6) = gSecond
Alias gpsTime(7) = gMicroSecond   

Alias gpsLoc(1) = gpsResult 	'GOESgps instruction result code
Alias gpsLoc(2) = gpsSeconds 	'seconds since Jan 1, 2000
Alias gpsLoc(3) = gpsLat  		'Fractional degrees; 100 nanodegree resolution
Alias gpsLoc(4) = gpsLon			'Fractional degrees; 100 nanodegree resolution
Alias gpsLoc(5) = gpsElev  		'Signed 32-bit number, in centimeters
Alias gpsLoc(6) = gpsMagElev  'Fractional degrees; 1 millidegree resolution 

'''Define units for SWMP data table output
Units AirTemp = C
Units atMax = C
Units atMin = C
Units RHumidity = %
Units Pressure = mb
Units WindSpd = m/s
Units WindDir = deg
Units	Precip = mm
Units PAR = mmoles/m^2
Units Batt = Volts
Units DailyRain = mm '***

' Define units of max/min timestamps used in SWMP table
Units atMaxTimeSwmp = hhmm
Units atMinTimeSwmp = hhmm 
Units wsMaxTimeSwmp = hhmm

' Define units of max/min timestamps used in GOES table
Units atMaxTime = hhmm
Units atMinTime = hhmm  
Units wsMaxTime = hhmm

' Define units for GOES data table output
Units goesAT = C
Units goesATMax = C
Units goesATMin = C
Units goesRH = %
Units goesBP = mb
Units goesWS = m/s
Units goesWD = Deg
Units goesWSD = m/s
Units goesWSMax = m/s
Units goesPrecip = mm
Units goesBatt = Volts
Units goesDailyRain = mm '***
Units goesPar = mmoles/m^2 '***

'''Define Data Tables:
' The SWMP data table definition:
DataTable (SWMP,1,-1)
	DataInterval (0,15,min,10)
		CardOut (0 ,-1)
	Average (1,AirTemp,IEEE4,False)
	Fieldnames("ATemp") 'instruction is used to output desired fieldnames in output table headers
	Sample (1,atMax,IEEE4)
	Fieldnames("MaxTemp")
	Sample (1,atMaxTimeSwmp,String)
	Fieldnames ("MaxTempT")
	Sample (1,atMin,IEEE4)
	Fieldnames("MinTemp")
	Sample (1,atMinTimeSwmp,String)
	Fieldnames("MinTempT")
	Average (1,RHumidity,IEEE4,False)
	Fieldnames("RH")
	Average (1,Pressure,IEEE4,False)
	Fieldnames("BP")
	WindVector (1,WindSpd,WindDir,IEEE4,WindGood,0,0,0)'MOD**
	Fieldnames("WSpd,Wdir,SDWDir")
	Sample (1,wsMax,IEEE4)
	Fieldnames("MaxWSpd")
	Sample (1,wsMaxTimeSwmp,String)
	Fieldnames("MaxWSpdT")
	Totalize (1,Precip,IEEE4,False)
	Fieldnames("TotPrcp")
	Totalize(1,PAR,IEEE4,False)
	Fieldnames("TotPAR")
	Average (1,Batt,IEEE4,False)
	Fieldnames("AvgVolt")
	Sample(1,DailyRain,IEEE4) '***
	Fieldnames("CumPrcp") '***
EndTable

' The Goes Output Data Table Def
DataTable (GOESOUT,1,-1)
	DataInterval (0,15,min,10)
	Average(1,goesAT,IEEE4,False)
	Fieldnames("G_ATemp")
	Sample(1,goesATMax,IEEE4)
	Fieldnames("G_MaxTemp")
	Sample(1,atMaxTime,IEEE4)
	Fieldnames("G_MaxTempT")
	Sample(1,goesATMin,IEEE4)
	Fieldnames("G_MinTemp")
	Sample(1,atMinTime,IEEE4)
	Fieldnames("G_MinTempT")
	Average (1,goesRH,IEEE4,False)
	Fieldnames("G_RH")
	Average (1,goesBP,IEEE4,False)
	Fieldnames("G_BP")
	Sample (1,goesWS,IEEE4)
	Fieldnames("G_WSpd")
	Sample (1,goesWD,IEEE4)
	Fieldnames("G_Wdir")
	Sample (1,goesWSD,IEEE4)
	Fieldnames("G_SDWDir")
	Sample(1,goesWSMax,IEEE4)
	Fieldnames("G_MaxWSpd")
	Sample(1,wsMaxTime,IEEE4)
	Fieldnames("G_MaxWSpdT")
	Totalize (1,goesPrecip,IEEE4,False)
	Fieldnames("G_TotPrcp")
	Totalize (1,goesPAR,IEEE4,False)
	Fieldnames("G_TotPAR")
	Average (1,goesBatt,IEEE4,False)
	Fieldnames("G_AvgVolt")
	Sample(1,GOESDailyRain,IEEE4) '***
	Fieldnames("G_CumPrcp") '***
EndTable

' The OWC 15 Min data table definition:
DataTable (OWC15,1,-1) 
	DataInterval (0,15,min,10)
		CardOut (0 ,-1)
	Average (1,AirTemp,IEEE4,False)
		Fieldnames("ATemp")
	Sample (1,atMax,IEEE4)
		Fieldnames("MaxTemp")
	Sample (1,atMaxTimeSwmp,String)
		Fieldnames ("MaxTempT")
	Sample (1,atMin,IEEE4)
		Fieldnames("MinTemp")
	Sample (1,atMinTimeSwmp,String)
		Fieldnames("MinTempT")
	Average (1,RHumidity,IEEE4,False)
		Fieldnames("RH")
	Average (1,Pressure,IEEE4,False)
		Fieldnames("BP")
	WindVector (1,WindSpd,WindDir,IEEE4,WindGood,0,0,0)'MOD**
		Fieldnames("WSpd,Wdir,SDWDir") 
	Sample (1,wsMax,IEEE4)
		Fieldnames("MaxWSpd")
	Sample (1,wsMaxTimeSwmp,String)
		Fieldnames("MaxWSpdT")
	Totalize (1,Precip,IEEE4,False)
		Fieldnames("TotPrcp")
	Totalize(1,PAR,IEEE4,False)
		Fieldnames("TotPAR")
			Average (1,Batt,IEEE4,False)
		Fieldnames("AvgVolt")
EndTable

' The OWC Daily data table definition:
DataTable (OWCDaily,1,-1) 
	DataInterval (0,1440,Min,10)
		CardOut (0 ,-1)
	Average (1,AirTemp,IEEE4,False)
		Fieldnames("ATemp")
	Sample (1,atMax,IEEE4)
		Fieldnames("MaxTemp")
	Sample (1,atMaxTimeSwmp,String)
		Fieldnames ("MaxTempT")
	Sample (1,atMin,IEEE4)
		Fieldnames("MinTemp")
	Sample (1,atMinTimeSwmp,String)
		Fieldnames("MinTempT")
	Average (1,RHumidity,IEEE4,False)
		Fieldnames("RH")
	Average (1,Pressure,IEEE4,False)
		Fieldnames("BP")
	WindVector (1,WindSpd,WindDir,IEEE4,WindGood,0,0,0)'MOD**
		Fieldnames("WSpd,Wdir,SDWDir") 
	Sample (1,wsMax,IEEE4)
		Fieldnames("MaxWSpd")
	Sample (1,wsMaxTimeSwmp,String)
		Fieldnames("MaxWSpdT")
	Totalize (1,Precip,IEEE4,False)
		Fieldnames("TotPrcp")
	Totalize(1,PAR,IEEE4,False)
		Fieldnames("TotPAR")
EndTable

'''Subroutines:
' Sub to calculate max/min and timestamps for SWMP table (goes integer values are derived from)
Sub MaxMin
	if AirTemp < atMin then 	'Track Min and time of Min air temp
		atMin = AirTemp
		Realtime(time())
		atMinTime = Hour*100+Minute 'time formatted as integer for GOES table
		atMinTimeSwmp = Hour + ":" + Minute 'time formatted as string for SWMP table
	endif
	If AirTemp > atMax then	'Track Max and time of Max air temp
		atMax = AirTemp
		Realtime(time())
		atMaxTime = Hour*100+Minute
		atMaxTimeSwmp = Hour + ":" + Minute
	endif
	If WindSpd > wsMax then	'Track Max and time of max wind
		wsMax = WindSpd
		Realtime(time())
		wsMaxTime = Hour*100+Minute
		wsMaxTimeSwmp = Hour + ":" + Minute
	endif
endsub

' Sub to setup for the GOES TX312 transmitter
Sub setup
	GOESSetup (goesSetResult,&H3B017310,10,145,300,0,100,"0_1_0_0","0_0_0","0_0_0")
endsub

'Main Program
BeginProg
	'Initialize Min & Max Variables
	atMin = 20000
	atMax = -20000
	wsMax = -20000
	
	'initialize so goes setup subroutine will be called on first run of program
	goesSetResult = -1
	
	'Scan Rate
	Scan (5,Sec,0,0)
	
	'''Begin sensor settings
		'Reference Temperature in C and Battery Voltage in Volts
		PanelTemp (PTempC,250)
		Battery (Batt)

		'HC2S3 (7 Wire) Temperature & Relative Humidity Sensor measurements "AirTemp" in C & "RHumidity" in %
'    		PortSet (9,1)
'    		Delay(0,3,mSec)
    		VoltSe(AirTemp,1,mV2500,1,0,0,_60Hz,0.1,-40.0)
    		VoltSe(RHumidity,1,mV2500,2,0,0,_60Hz,0.1,0)
'    		PortSet (9,0)

		'Vaisala CS-106 Barometric Pressure Sensor measurement "Pressure" in mb on all the time...
		VoltSe(Pressure,1,mV2500,3,1,0,_60Hz,0.240,522.0)

		'RM Young	5103-5 Wind Speed & Direction Sensor measurements Wind_Spd in ms & Wind_Dir in Degrees
		PulseCount(WindSpd,1,1,1,1,0.098,0)
		If WindSpd = NAN Then'MOD**
			WindGood = true'MOD**
		else'MOD**
			WindGood = false'MOD**
		endif'MOD**
		BrHalf(WindDir,1,mV2500,4,1,1,2500,True,0,_60Hz,355,0)
		If WindDir>=360 Then WindDir=0

		'MET ONE 385 Heated Rain Gauge measurement Precip in mm
		PulseCount(Precip,1,2,2,0,0.254,0)
		DailyRain = DailyRain+Precip '***

		'LI190SZ Quantum Sensor measurements PAR:
		VoltDiff(PAR,1,mV25,3,True,0,_60Hz,1.151342,0)

'''End sensor settings

		'Reset station clock using GPS clock
		If TimeintoInterval (722,1440,min) then	'at two minutes past noon set clock to gps clock
			GOESGPS (gpsloc(),gpsTime())
			if gpsResult=0and gHour<24and gHour>=0and gMinute<60and gMinute>=0and gSecond<60and gSecond>=0 then
				gHour = gHour - GMTOFFSET 'adjust clock in GMT to local time
				if gHour<0 then
					gHour=gHour+24
				endif
				ClockSet (gpsTime())
			Endif
		endif
		
		call MaxMin		'track airTempMax, airTempMin, wsMax and times
		
		CallTable SWMP
		
		'Convert and store as integers for GOES transmission (only those not already integers)
		goesBatt = Batt * 100
		goesAT = AirTemp * 100
		goesATMAx = atMax * 100
		goesATMin = atMin * 100
		goesRH = RHumidity * 10
		goesBP = Pressure * 10
		goesPrecip = Precip * 1000
		goesPar = Par
		goesWSMax = wsMax * 100
		goesDailyRain = DailyRain*1000 '***
		
		'following must be called only after Fiftnmin table written to because 
		'   values are generated by WindVector instruction
		goesWS = SWMP.WSpd*100
		goesWD = SWMP.Wdir*10
		goesWSD = SWMP.SDWDir*10

		CallTable GOESOUT
		
		'GOES Instructions
		'		send to transmitter at time atleast 2 minutes before transmit time
		If TimeintoInterval (58,60,Min) then
			GOESData (goesFailures,GOESOUT,0,1,2)
		endif

		CallTable OWC15
		CallTable OWCDaily				
		
		'Run setup subroutine if GOESSetResult is anything other than 0
		if goesSetResult then call setup

		if TimeintoInterval(0,15,min) then	'After Min and Max are written by MaxMin sub
			atMin = 20000		'reset initial conditions for temp min and max and wind spd max
			atMax = -20000
			wsMax = -20000
		endif

		'reset all daily rain values to 0 every 24 hours
		if iftime(0,1440,min) then DailyRain = 0 '***
		if iftime(0,1440,min) then goesDailyRain = 0 '***
		
	NextScan
EndProg

